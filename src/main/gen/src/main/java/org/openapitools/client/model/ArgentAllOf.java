/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.client.JSON;

/** ArgentAllOf */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2024-07-23T10:20:14.118552532+03:00[Indian/Antananarivo]")
public class ArgentAllOf {
  public static final String SERIALIZED_NAME_DATE_D_OUVERTURE = "date_d_ouverture";

  @SerializedName(SERIALIZED_NAME_DATE_D_OUVERTURE)
  private LocalDate dateDOuverture;

  /** Gets or Sets type */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DETTE("DETTE"),

    CREANCE("CREANCE"),

    AUTRES("AUTRES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ArgentAllOf() {}

  public ArgentAllOf dateDOuverture(LocalDate dateDOuverture) {

    this.dateDOuverture = dateDOuverture;
    return this;
  }

  /**
   * Get dateDOuverture
   *
   * @return dateDOuverture
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public LocalDate getDateDOuverture() {
    return dateDOuverture;
  }

  public void setDateDOuverture(LocalDate dateDOuverture) {
    this.dateDOuverture = dateDOuverture;
  }

  public ArgentAllOf type(TypeEnum type) {

    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ArgentAllOf argentAllOf = (ArgentAllOf) o;
    return Objects.equals(this.dateDOuverture, argentAllOf.dateDOuverture)
        && Objects.equals(this.type, argentAllOf.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateDOuverture, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ArgentAllOf {\n");
    sb.append("    dateDOuverture: ").append(toIndentedString(dateDOuverture)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_d_ouverture");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to ArgentAllOf
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (ArgentAllOf.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in ArgentAllOf is not found in the empty JSON string",
                ArgentAllOf.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!ArgentAllOf.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `ArgentAllOf` properties."
                    + " JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
        && !jsonObj.get("type").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `type` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("type").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ArgentAllOf.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ArgentAllOf' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ArgentAllOf> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(ArgentAllOf.class));

      return (TypeAdapter<T>)
          new TypeAdapter<ArgentAllOf>() {
            @Override
            public void write(JsonWriter out, ArgentAllOf value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public ArgentAllOf read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of ArgentAllOf given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ArgentAllOf
   * @throws IOException if the JSON string is invalid with respect to ArgentAllOf
   */
  public static ArgentAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ArgentAllOf.class);
  }

  /**
   * Convert an instance of ArgentAllOf to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
