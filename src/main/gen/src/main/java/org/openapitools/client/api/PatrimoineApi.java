/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.model.GetPatrimoines200Response;
import org.openapitools.client.model.Patrimoine;

public class PatrimoineApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public PatrimoineApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PatrimoineApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for crupdatePatrimoines
   *
   * @param getPatrimoines200Response (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de patrimoines créés ou mis à jour </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call crupdatePatrimoinesCall(
      GetPatrimoines200Response getPatrimoines200Response, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = getPatrimoines200Response;

    // create path and map variables
    String localVarPath = "/patrimoines";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call crupdatePatrimoinesValidateBeforeCall(
      GetPatrimoines200Response getPatrimoines200Response, final ApiCallback _callback)
      throws ApiException {

    okhttp3.Call localVarCall = crupdatePatrimoinesCall(getPatrimoines200Response, _callback);
    return localVarCall;
  }

  /**
   * met à jour les patrimoines si le nom est donné, sinon on le crée
   *
   * @param getPatrimoines200Response (optional)
   * @return GetPatrimoines200Response
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de patrimoines créés ou mis à jour </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public GetPatrimoines200Response crupdatePatrimoines(
      GetPatrimoines200Response getPatrimoines200Response) throws ApiException {
    ApiResponse<GetPatrimoines200Response> localVarResp =
        crupdatePatrimoinesWithHttpInfo(getPatrimoines200Response);
    return localVarResp.getData();
  }

  /**
   * met à jour les patrimoines si le nom est donné, sinon on le crée
   *
   * @param getPatrimoines200Response (optional)
   * @return ApiResponse&lt;GetPatrimoines200Response&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de patrimoines créés ou mis à jour </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GetPatrimoines200Response> crupdatePatrimoinesWithHttpInfo(
      GetPatrimoines200Response getPatrimoines200Response) throws ApiException {
    okhttp3.Call localVarCall =
        crupdatePatrimoinesValidateBeforeCall(getPatrimoines200Response, null);
    Type localVarReturnType = new TypeToken<GetPatrimoines200Response>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * met à jour les patrimoines si le nom est donné, sinon on le crée (asynchronously)
   *
   * @param getPatrimoines200Response (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de patrimoines créés ou mis à jour </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call crupdatePatrimoinesAsync(
      GetPatrimoines200Response getPatrimoines200Response,
      final ApiCallback<GetPatrimoines200Response> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        crupdatePatrimoinesValidateBeforeCall(getPatrimoines200Response, _callback);
    Type localVarReturnType = new TypeToken<GetPatrimoines200Response>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getPatrimoineByNom
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> le patrimoine demandé </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoineByNomCall(String nomPatrimoine, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/patrimoines/{nom_patrimoine}"
            .replaceAll(
                "\\{" + "nom_patrimoine" + "\\}",
                localVarApiClient.escapeString(nomPatrimoine.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPatrimoineByNomValidateBeforeCall(
      String nomPatrimoine, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPatrimoine' when calling getPatrimoineByNom(Async)");
    }

    okhttp3.Call localVarCall = getPatrimoineByNomCall(nomPatrimoine, _callback);
    return localVarCall;
  }

  /**
   * obtenir le patrimoine demandé
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @return Patrimoine
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> le patrimoine demandé </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public Patrimoine getPatrimoineByNom(String nomPatrimoine) throws ApiException {
    ApiResponse<Patrimoine> localVarResp = getPatrimoineByNomWithHttpInfo(nomPatrimoine);
    return localVarResp.getData();
  }

  /**
   * obtenir le patrimoine demandé
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @return ApiResponse&lt;Patrimoine&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> le patrimoine demandé </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Patrimoine> getPatrimoineByNomWithHttpInfo(String nomPatrimoine)
      throws ApiException {
    okhttp3.Call localVarCall = getPatrimoineByNomValidateBeforeCall(nomPatrimoine, null);
    Type localVarReturnType = new TypeToken<Patrimoine>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * obtenir le patrimoine demandé (asynchronously)
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> le patrimoine demandé </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoineByNomAsync(
      String nomPatrimoine, final ApiCallback<Patrimoine> _callback) throws ApiException {

    okhttp3.Call localVarCall = getPatrimoineByNomValidateBeforeCall(nomPatrimoine, _callback);
    Type localVarReturnType = new TypeToken<Patrimoine>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getPatrimoines
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée de patrimoines </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinesCall(
      Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/patrimoines";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (pageSize != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPatrimoinesValidateBeforeCall(
      Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {

    okhttp3.Call localVarCall = getPatrimoinesCall(page, pageSize, _callback);
    return localVarCall;
  }

  /**
   * obtenir une liste paginée des patrimoines
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return GetPatrimoines200Response
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée de patrimoines </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public GetPatrimoines200Response getPatrimoines(Integer page, Integer pageSize)
      throws ApiException {
    ApiResponse<GetPatrimoines200Response> localVarResp =
        getPatrimoinesWithHttpInfo(page, pageSize);
    return localVarResp.getData();
  }

  /**
   * obtenir une liste paginée des patrimoines
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;GetPatrimoines200Response&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée de patrimoines </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GetPatrimoines200Response> getPatrimoinesWithHttpInfo(
      Integer page, Integer pageSize) throws ApiException {
    okhttp3.Call localVarCall = getPatrimoinesValidateBeforeCall(page, pageSize, null);
    Type localVarReturnType = new TypeToken<GetPatrimoines200Response>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * obtenir une liste paginée des patrimoines (asynchronously)
   *
   * @param page (optional)
   * @param pageSize (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée de patrimoines </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinesAsync(
      Integer page, Integer pageSize, final ApiCallback<GetPatrimoines200Response> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getPatrimoinesValidateBeforeCall(page, pageSize, _callback);
    Type localVarReturnType = new TypeToken<GetPatrimoines200Response>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
