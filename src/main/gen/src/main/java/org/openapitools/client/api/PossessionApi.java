/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.model.GetPatrimoinePossessions200Response;
import org.openapitools.client.model.Possession;

public class PossessionApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public PossessionApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PossessionApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for crupdatePatrimoinePossessions
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier
   *     (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de possessions ajoutées ou modifiées </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call crupdatePatrimoinePossessionsCall(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      GetPatrimoinePossessions200Response getPatrimoinePossessions200Response,
      final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = getPatrimoinePossessions200Response;

    // create path and map variables
    String localVarPath =
        "/patrimoines/{nom_patrimoine}/possessions"
            .replaceAll(
                "\\{" + "nom_patrimoine" + "\\}",
                localVarApiClient.escapeString(nomPatrimoine.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (pageSize != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call crupdatePatrimoinePossessionsValidateBeforeCall(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      GetPatrimoinePossessions200Response getPatrimoinePossessions200Response,
      final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPatrimoine' when calling"
              + " crupdatePatrimoinePossessions(Async)");
    }

    okhttp3.Call localVarCall =
        crupdatePatrimoinePossessionsCall(
            nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response, _callback);
    return localVarCall;
  }

  /**
   * met à jour une possession d&#39;un patrimoine si le nom existe, sinon on le crée
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier
   *     (optional)
   * @return GetPatrimoinePossessions200Response
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de possessions ajoutées ou modifiées </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public GetPatrimoinePossessions200Response crupdatePatrimoinePossessions(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      GetPatrimoinePossessions200Response getPatrimoinePossessions200Response)
      throws ApiException {
    ApiResponse<GetPatrimoinePossessions200Response> localVarResp =
        crupdatePatrimoinePossessionsWithHttpInfo(
            nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response);
    return localVarResp.getData();
  }

  /**
   * met à jour une possession d&#39;un patrimoine si le nom existe, sinon on le crée
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier
   *     (optional)
   * @return ApiResponse&lt;GetPatrimoinePossessions200Response&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de possessions ajoutées ou modifiées </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GetPatrimoinePossessions200Response> crupdatePatrimoinePossessionsWithHttpInfo(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      GetPatrimoinePossessions200Response getPatrimoinePossessions200Response)
      throws ApiException {
    okhttp3.Call localVarCall =
        crupdatePatrimoinePossessionsValidateBeforeCall(
            nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response, null);
    Type localVarReturnType = new TypeToken<GetPatrimoinePossessions200Response>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * met à jour une possession d&#39;un patrimoine si le nom existe, sinon on le crée
   * (asynchronously)
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param getPatrimoinePossessions200Response liste de possessions à ajouter ou à modifier
   *     (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste de possessions ajoutées ou modifiées </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call crupdatePatrimoinePossessionsAsync(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      GetPatrimoinePossessions200Response getPatrimoinePossessions200Response,
      final ApiCallback<GetPatrimoinePossessions200Response> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        crupdatePatrimoinePossessionsValidateBeforeCall(
            nomPatrimoine, page, pageSize, getPatrimoinePossessions200Response, _callback);
    Type localVarReturnType = new TypeToken<GetPatrimoinePossessions200Response>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deletePatrimoinePossessionByNom
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deletePatrimoinePossessionByNomCall(
      String nomPatrimoine, String nomPossession, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/patrimoines/{nom_patrimoine}/possessions/{nom_possession}"
            .replaceAll(
                "\\{" + "nom_patrimoine" + "\\}",
                localVarApiClient.escapeString(nomPatrimoine.toString()))
            .replaceAll(
                "\\{" + "nom_possession" + "\\}",
                localVarApiClient.escapeString(nomPossession.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deletePatrimoinePossessionByNomValidateBeforeCall(
      String nomPatrimoine, String nomPossession, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPatrimoine' when calling"
              + " deletePatrimoinePossessionByNom(Async)");
    }

    // verify the required parameter 'nomPossession' is set
    if (nomPossession == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPossession' when calling"
              + " deletePatrimoinePossessionByNom(Async)");
    }

    okhttp3.Call localVarCall =
        deletePatrimoinePossessionByNomCall(nomPatrimoine, nomPossession, _callback);
    return localVarCall;
  }

  /**
   * effacer un patrimoine d&#39;une possession
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public void deletePatrimoinePossessionByNom(String nomPatrimoine, String nomPossession)
      throws ApiException {
    deletePatrimoinePossessionByNomWithHttpInfo(nomPatrimoine, nomPossession);
  }

  /**
   * effacer un patrimoine d&#39;une possession
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Void> deletePatrimoinePossessionByNomWithHttpInfo(
      String nomPatrimoine, String nomPossession) throws ApiException {
    okhttp3.Call localVarCall =
        deletePatrimoinePossessionByNomValidateBeforeCall(nomPatrimoine, nomPossession, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * effacer un patrimoine d&#39;une possession (asynchronously)
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call deletePatrimoinePossessionByNomAsync(
      String nomPatrimoine, String nomPossession, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        deletePatrimoinePossessionByNomValidateBeforeCall(nomPatrimoine, nomPossession, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for getPatrimoinePossessionByNom
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> la possession demandée </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinePossessionByNomCall(
      String nomPatrimoine, String nomPossession, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/patrimoines/{nom_patrimoine}/possessions/{nom_possession}"
            .replaceAll(
                "\\{" + "nom_patrimoine" + "\\}",
                localVarApiClient.escapeString(nomPatrimoine.toString()))
            .replaceAll(
                "\\{" + "nom_possession" + "\\}",
                localVarApiClient.escapeString(nomPossession.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPatrimoinePossessionByNomValidateBeforeCall(
      String nomPatrimoine, String nomPossession, final ApiCallback _callback) throws ApiException {

    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPatrimoine' when calling"
              + " getPatrimoinePossessionByNom(Async)");
    }

    // verify the required parameter 'nomPossession' is set
    if (nomPossession == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPossession' when calling"
              + " getPatrimoinePossessionByNom(Async)");
    }

    okhttp3.Call localVarCall =
        getPatrimoinePossessionByNomCall(nomPatrimoine, nomPossession, _callback);
    return localVarCall;
  }

  /**
   * obtenir la possession demandée
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @return Possession
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> la possession demandée </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public Possession getPatrimoinePossessionByNom(String nomPatrimoine, String nomPossession)
      throws ApiException {
    ApiResponse<Possession> localVarResp =
        getPatrimoinePossessionByNomWithHttpInfo(nomPatrimoine, nomPossession);
    return localVarResp.getData();
  }

  /**
   * obtenir la possession demandée
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @return ApiResponse&lt;Possession&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> la possession demandée </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Possession> getPatrimoinePossessionByNomWithHttpInfo(
      String nomPatrimoine, String nomPossession) throws ApiException {
    okhttp3.Call localVarCall =
        getPatrimoinePossessionByNomValidateBeforeCall(nomPatrimoine, nomPossession, null);
    Type localVarReturnType = new TypeToken<Possession>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * obtenir la possession demandée (asynchronously)
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param nomPossession nom de la possession avec les espaces remplacés par \&quot;_\&quot;
   *     s&#39;il y en a (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> la possession demandée </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinePossessionByNomAsync(
      String nomPatrimoine, String nomPossession, final ApiCallback<Possession> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getPatrimoinePossessionByNomValidateBeforeCall(nomPatrimoine, nomPossession, _callback);
    Type localVarReturnType = new TypeToken<Possession>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getPatrimoinePossessions
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée des possessions </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinePossessionsCall(
      String nomPatrimoine, Integer page, Integer pageSize, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/patrimoines/{nom_patrimoine}/possessions"
            .replaceAll(
                "\\{" + "nom_patrimoine" + "\\}",
                localVarApiClient.escapeString(nomPatrimoine.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (page != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
    }

    if (pageSize != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};

    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getPatrimoinePossessionsValidateBeforeCall(
      String nomPatrimoine, Integer page, Integer pageSize, final ApiCallback _callback)
      throws ApiException {

    // verify the required parameter 'nomPatrimoine' is set
    if (nomPatrimoine == null) {
      throw new ApiException(
          "Missing the required parameter 'nomPatrimoine' when calling"
              + " getPatrimoinePossessions(Async)");
    }

    okhttp3.Call localVarCall =
        getPatrimoinePossessionsCall(nomPatrimoine, page, pageSize, _callback);
    return localVarCall;
  }

  /**
   * obtenir une liste paginée des possessions d&#39;un patrimoine
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return GetPatrimoinePossessions200Response
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée des possessions </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public GetPatrimoinePossessions200Response getPatrimoinePossessions(
      String nomPatrimoine, Integer page, Integer pageSize) throws ApiException {
    ApiResponse<GetPatrimoinePossessions200Response> localVarResp =
        getPatrimoinePossessionsWithHttpInfo(nomPatrimoine, page, pageSize);
    return localVarResp.getData();
  }

  /**
   * obtenir une liste paginée des possessions d&#39;un patrimoine
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @return ApiResponse&lt;GetPatrimoinePossessions200Response&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée des possessions </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<GetPatrimoinePossessions200Response> getPatrimoinePossessionsWithHttpInfo(
      String nomPatrimoine, Integer page, Integer pageSize) throws ApiException {
    okhttp3.Call localVarCall =
        getPatrimoinePossessionsValidateBeforeCall(nomPatrimoine, page, pageSize, null);
    Type localVarReturnType = new TypeToken<GetPatrimoinePossessions200Response>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * obtenir une liste paginée des possessions d&#39;un patrimoine (asynchronously)
   *
   * @param nomPatrimoine nom du patrimoine avec les espaces remplacés par \&quot;_\&quot; s&#39;il
   *     y en a (required)
   * @param page (optional)
   * @param pageSize (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table summary="Response Details" border="1">
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> liste paginée des possessions </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
   * <tr><td> 429 </td><td> Too many requests to the API </td><td>  -  </td></tr>
   * <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call getPatrimoinePossessionsAsync(
      String nomPatrimoine,
      Integer page,
      Integer pageSize,
      final ApiCallback<GetPatrimoinePossessions200Response> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getPatrimoinePossessionsValidateBeforeCall(nomPatrimoine, page, pageSize, _callback);
    Type localVarReturnType = new TypeToken<GetPatrimoinePossessions200Response>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
