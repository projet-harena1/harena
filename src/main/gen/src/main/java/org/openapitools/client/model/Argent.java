/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.client.model.Devise;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Argent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-23T10:20:14.118552532+03:00[Indian/Antananarivo]")
public class Argent {
  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private LocalDate t;

  public static final String SERIALIZED_NAME_NOM = "nom";
  @SerializedName(SERIALIZED_NAME_NOM)
  private String nom;

  public static final String SERIALIZED_NAME_VALEUR_COMPTABLE = "valeur_comptable";
  @SerializedName(SERIALIZED_NAME_VALEUR_COMPTABLE)
  private Integer valeurComptable;

  public static final String SERIALIZED_NAME_DEVISE = "devise";
  @SerializedName(SERIALIZED_NAME_DEVISE)
  private Devise devise;

  public static final String SERIALIZED_NAME_DATE_D_OUVERTURE = "date_d_ouverture";
  @SerializedName(SERIALIZED_NAME_DATE_D_OUVERTURE)
  private LocalDate dateDOuverture;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    DETTE("DETTE"),
    
    CREANCE("CREANCE"),
    
    AUTRES("AUTRES");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Argent() {
  }

  public Argent t(LocalDate t) {
    
    this.t = t;
    return this;
  }

   /**
   * Get t
   * @return t
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getT() {
    return t;
  }


  public void setT(LocalDate t) {
    this.t = t;
  }


  public Argent nom(String nom) {
    
    this.nom = nom;
    return this;
  }

   /**
   * Get nom
   * @return nom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNom() {
    return nom;
  }


  public void setNom(String nom) {
    this.nom = nom;
  }


  public Argent valeurComptable(Integer valeurComptable) {
    
    this.valeurComptable = valeurComptable;
    return this;
  }

   /**
   * Get valeurComptable
   * @return valeurComptable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getValeurComptable() {
    return valeurComptable;
  }


  public void setValeurComptable(Integer valeurComptable) {
    this.valeurComptable = valeurComptable;
  }


  public Argent devise(Devise devise) {
    
    this.devise = devise;
    return this;
  }

   /**
   * Get devise
   * @return devise
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Devise getDevise() {
    return devise;
  }


  public void setDevise(Devise devise) {
    this.devise = devise;
  }


  public Argent dateDOuverture(LocalDate dateDOuverture) {
    
    this.dateDOuverture = dateDOuverture;
    return this;
  }

   /**
   * Get dateDOuverture
   * @return dateDOuverture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getDateDOuverture() {
    return dateDOuverture;
  }


  public void setDateDOuverture(LocalDate dateDOuverture) {
    this.dateDOuverture = dateDOuverture;
  }


  public Argent type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Argent argent = (Argent) o;
    return Objects.equals(this.t, argent.t) &&
        Objects.equals(this.nom, argent.nom) &&
        Objects.equals(this.valeurComptable, argent.valeurComptable) &&
        Objects.equals(this.devise, argent.devise) &&
        Objects.equals(this.dateDOuverture, argent.dateDOuverture) &&
        Objects.equals(this.type, argent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(t, nom, valeurComptable, devise, dateDOuverture, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Argent {\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    nom: ").append(toIndentedString(nom)).append("\n");
    sb.append("    valeurComptable: ").append(toIndentedString(valeurComptable)).append("\n");
    sb.append("    devise: ").append(toIndentedString(devise)).append("\n");
    sb.append("    dateDOuverture: ").append(toIndentedString(dateDOuverture)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("t");
    openapiFields.add("nom");
    openapiFields.add("valeur_comptable");
    openapiFields.add("devise");
    openapiFields.add("date_d_ouverture");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Argent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Argent.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Argent is not found in the empty JSON string", Argent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Argent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Argent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("nom") != null && !jsonObj.get("nom").isJsonNull()) && !jsonObj.get("nom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nom").toString()));
      }
      // validate the optional field `devise`
      if (jsonObj.get("devise") != null && !jsonObj.get("devise").isJsonNull()) {
        Devise.validateJsonObject(jsonObj.getAsJsonObject("devise"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Argent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Argent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Argent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Argent.class));

       return (TypeAdapter<T>) new TypeAdapter<Argent>() {
           @Override
           public void write(JsonWriter out, Argent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Argent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Argent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Argent
  * @throws IOException if the JSON string is invalid with respect to Argent
  */
  public static Argent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Argent.class);
  }

 /**
  * Convert an instance of Argent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

