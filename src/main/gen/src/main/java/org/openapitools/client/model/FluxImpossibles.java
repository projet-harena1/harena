/*
 * harena
 * harena
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Objects;
import java.util.Set;
import org.openapitools.client.JSON;

/** FluxImpossibles */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2024-07-23T10:20:14.118552532+03:00[Indian/Antananarivo]")
public class FluxImpossibles {
  public static final String SERIALIZED_NAME_NOM_ARGENT = "nom_argent";

  @SerializedName(SERIALIZED_NAME_NOM_ARGENT)
  private String nomArgent;

  public static final String SERIALIZED_NAME_DATE = "date";

  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_VALEUR_ARGENT = "valeur_argent";

  @SerializedName(SERIALIZED_NAME_VALEUR_ARGENT)
  private Integer valeurArgent;

  public static final String SERIALIZED_NAME_FLUX_ARGENTS = "flux_argents";

  @SerializedName(SERIALIZED_NAME_FLUX_ARGENTS)
  private List<FluxArgent> fluxArgents = null;

  public FluxImpossibles() {}

  public FluxImpossibles nomArgent(String nomArgent) {

    this.nomArgent = nomArgent;
    return this;
  }

  /**
   * Get nomArgent
   *
   * @return nomArgent
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public String getNomArgent() {
    return nomArgent;
  }

  public void setNomArgent(String nomArgent) {
    this.nomArgent = nomArgent;
  }

  public FluxImpossibles date(LocalDate date) {

    this.date = date;
    return this;
  }

  /**
   * Get date
   *
   * @return date
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public LocalDate getDate() {
    return date;
  }

  public void setDate(LocalDate date) {
    this.date = date;
  }

  public FluxImpossibles valeurArgent(Integer valeurArgent) {

    this.valeurArgent = valeurArgent;
    return this;
  }

  /**
   * Get valeurArgent
   *
   * @return valeurArgent
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public Integer getValeurArgent() {
    return valeurArgent;
  }

  public void setValeurArgent(Integer valeurArgent) {
    this.valeurArgent = valeurArgent;
  }

  public FluxImpossibles fluxArgents(List<FluxArgent> fluxArgents) {

    this.fluxArgents = fluxArgents;
    return this;
  }

  public FluxImpossibles addFluxArgentsItem(FluxArgent fluxArgentsItem) {
    if (this.fluxArgents == null) {
      this.fluxArgents = new ArrayList<>();
    }
    this.fluxArgents.add(fluxArgentsItem);
    return this;
  }

  /**
   * Get fluxArgents
   *
   * @return fluxArgents
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  public List<FluxArgent> getFluxArgents() {
    return fluxArgents;
  }

  public void setFluxArgents(List<FluxArgent> fluxArgents) {
    this.fluxArgents = fluxArgents;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FluxImpossibles fluxImpossibles = (FluxImpossibles) o;
    return Objects.equals(this.nomArgent, fluxImpossibles.nomArgent)
        && Objects.equals(this.date, fluxImpossibles.date)
        && Objects.equals(this.valeurArgent, fluxImpossibles.valeurArgent)
        && Objects.equals(this.fluxArgents, fluxImpossibles.fluxArgents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomArgent, date, valeurArgent, fluxArgents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FluxImpossibles {\n");
    sb.append("    nomArgent: ").append(toIndentedString(nomArgent)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    valeurArgent: ").append(toIndentedString(valeurArgent)).append("\n");
    sb.append("    fluxArgents: ").append(toIndentedString(fluxArgents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nom_argent");
    openapiFields.add("date");
    openapiFields.add("valeur_argent");
    openapiFields.add("flux_argents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Object and throws an exception if issues found
   *
   * @param jsonObj JSON Object
   * @throws IOException if the JSON Object is invalid with respect to FluxImpossibles
   */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    if (jsonObj == null) {
      if (FluxImpossibles.openapiRequiredFields.isEmpty()) {
        return;
      } else { // has required fields
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FluxImpossibles is not found in the empty JSON string",
                FluxImpossibles.openapiRequiredFields.toString()));
      }
    }

    Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
    // check to see if the JSON string contains additional fields
    for (Entry<String, JsonElement> entry : entries) {
      if (!FluxImpossibles.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `FluxImpossibles`"
                    + " properties. JSON: %s",
                entry.getKey(), jsonObj.toString()));
      }
    }
    if ((jsonObj.get("nom_argent") != null && !jsonObj.get("nom_argent").isJsonNull())
        && !jsonObj.get("nom_argent").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `nom_argent` to be a primitive type in the JSON string but got"
                  + " `%s`",
              jsonObj.get("nom_argent").toString()));
    }
    if (jsonObj.get("flux_argents") != null && !jsonObj.get("flux_argents").isJsonNull()) {
      JsonArray jsonArrayfluxArgents = jsonObj.getAsJsonArray("flux_argents");
      if (jsonArrayfluxArgents != null) {
        // ensure the json data is an array
        if (!jsonObj.get("flux_argents").isJsonArray()) {
          throw new IllegalArgumentException(
              String.format(
                  "Expected the field `flux_argents` to be an array in the JSON string but got"
                      + " `%s`",
                  jsonObj.get("flux_argents").toString()));
        }

        // validate the optional field `flux_argents` (array)
        for (int i = 0; i < jsonArrayfluxArgents.size(); i++) {
          FluxArgent.validateJsonObject(jsonArrayfluxArgents.get(i).getAsJsonObject());
        }
        ;
      }
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FluxImpossibles.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FluxImpossibles' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FluxImpossibles> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FluxImpossibles.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FluxImpossibles>() {
            @Override
            public void write(JsonWriter out, FluxImpossibles value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FluxImpossibles read(JsonReader in) throws IOException {
              JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
              validateJsonObject(jsonObj);
              return thisAdapter.fromJsonTree(jsonObj);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FluxImpossibles given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FluxImpossibles
   * @throws IOException if the JSON string is invalid with respect to FluxImpossibles
   */
  public static FluxImpossibles fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FluxImpossibles.class);
  }

  /**
   * Convert an instance of FluxImpossibles to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
